make all --print-data-base --no-builtin-variables --no-builtin-rules --question
# GNU Make 4.1
# Built for x86_64-pc-linux-gnu
# Copyright (C) 1988-2014 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

# Make data base, printed on Sat Jun  4 11:18:20 2022

# Variables

# automatic
<D = $(patsubst %/,%,$(dir $<))
# automatic
?F = $(notdir $?)
# environment
WSLENV = VSCODE_WSL_EXT_LOCATION/up
# default
.SHELLFLAGS := -c
# environment
VSCODE_LOG_NATIVE = false
# makefile (from 'makefile', line 7)
BACK_CONTAINER = backend-api-delta-v
# environment
NVM_INC = /home/ubuntu/.nvm/versions/node/v14.19.0/include/node
# automatic
?D = $(patsubst %/,%,$(dir $?))
# automatic
@D = $(patsubst %/,%,$(dir $@))
# automatic
@F = $(notdir $@)
# makefile
CURDIR := /home/ubuntu/projects/beta.gouv/delta-v
# makefile
SHELL = /bin/sh
# environment
VSCODE_NLS_CONFIG = {"locale":"en","availableLanguages":{}}
# environment
_ = /home/ubuntu/.vscode-server/bin/c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5/node
# makefile (from 'makefile', line 1)
MAKEFILE_LIST :=  makefile
# makefile (from 'makefile', line 147)
ARGS = $(filter-out $@,$(MAKECMDGOALS))
# 'override' directive
GNUMAKEFLAGS := 
# makefile (from 'makefile', line 12)
TEST_DATABASE_CONTAINER = e2e-test-database-delta-v
# environment
VSCODE_VERBOSE_LOGGING = true
# makefile (from 'makefile', line 8)
DATABASE_CONTAINER = database-delta-v
# environment
P9K_SSH = 0
# environment
VSCODE_CWD = /mnt/c/Users/ssaba/AppData/Local/Programs/Microsoft VS Code
# default
MAKE_HOST := x86_64-pc-linux-gnu
# environment
PATH = /home/ubuntu/.vscode-server/bin/c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5/bin/remote-cli:/home/ubuntu/.nvm/versions/node/v14.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files/Common Files/Oracle/Java/javapath:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/Users/ssaba/AppData/Local/Microsoft/WindowsApps:/mnt/c/adb:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/Android:/mnt/c/Program Files/Git/cmd:/mnt/c/Program Files/nodejs/:/mnt/c/Program Files/PowerShell/7/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/Users/ssaba/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ssaba/AppData/Local/hyper/app-3.0.2/resources/bin:/mnt/c/Users/ssaba/AppData/Roaming/npm:/mnt/c/Users/ssaba/AppData/Local/Programs/Microsoft VS Code/bin
# makefile (from 'makefile', line 3)
DOCKER_COMPOSE_RUN = $(DOCKER_COMPOSE) run $(USER)
# environment
LSCOLORS = Gxfxcxdxbxegedabagacad
# environment
XDG_RUNTIME_DIR = /mnt/wslg/runtime-dir
# environment
NVM_BIN = /home/ubuntu/.nvm/versions/node/v14.19.0/bin
# makefile (from 'makefile', line 1)
DOCKER_COMPOSE = docker-compose
# environment
VSCODE_LOG_STACK = false
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# makefile (from 'makefile', line 6)
STORYBOOK_CONTAINER = storybook-delta-v
# environment
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# environment
SSH_AUTH_SOCK = /tmp/ssh-gVLHRXyNA4MH/agent.42
# automatic
%F = $(notdir $%)
# environment
DISPLAY = :0
# environment
VSCODE_PIPE_LOGGING = true
# environment
PWD = /home/ubuntu/projects/beta.gouv/delta-v
# environment
VSCODE_IPC_HOOK_CLI = /mnt/wslg/runtime-dir/vscode-ipc-9c28b7bb-4420-46da-804b-7896367b941c.sock
# environment
SSH_AGENT_PID = 44
# environment
WSL_INTEROP = /run/WSL/772_interop
# environment
PULSE_SERVER = /mnt/wslg/PulseServer
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# environment
HOME = /home/ubuntu
# environment
LOGNAME = ubuntu
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = true
# environment
NVM_CD_FLAGS = -q
# environment
ZSH = /home/ubuntu/.oh-my-zsh
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# automatic
^D = $(patsubst %/,%,$(dir $^))
# environment
MAKELEVEL := 0
# default
MAKE = $(MAKE_COMMAND)
# default
MAKECMDGOALS := all
# environment
SHLVL = 0
# default
MAKE_VERSION := 4.1
# makefile (from 'makefile', line 2)
USER = --user $$(id -u):$$(id -g)
# makefile (from 'makefile', line 148)
.DEFAULT_GOAL := help   
# environment
NAME = LAPTOP-1NITJIV3
# makefile (from 'makefile', line 9)
ADMIN_DATABASE_CONTAINER = adminer
# environment
LESS = -R
# automatic
%D = $(patsubst %/,%,$(dir $%))
# makefile (from 'makefile', line 11)
TEST_BACK_CONTAINER = e2e-test-backend-api-delta-v
# environment
VSCODE_WSL_EXT_LOCATION = /mnt/c/Users/ssaba/.vscode/extensions/ms-vscode-remote.remote-wsl-0.66.3
# default
MAKE_COMMAND := make
# environment
OLDPWD = /mnt/c/Users/ssaba/AppData/Local/Programs/Microsoft VS Code
# default
.VARIABLES := 
# makefile (from 'makefile', line 15)
BACK_CONTAINERS = $(BACK_CONTAINER) $(DATABASE_CONTAINERS)
# automatic
*F = $(notdir $*)
# makefile
MAKEFLAGS = pqrR
# environment
MFLAGS = -pqrR
# automatic
*D = $(patsubst %/,%,$(dir $*))
# environment
NVM_DIR = /home/ubuntu/.nvm
# automatic
+D = $(patsubst %/,%,$(dir $+))
# automatic
+F = $(notdir $+)
# environment
VSCODE_HANDLES_SIGPIPE = true
# default
MAKEFILES := 
# automatic
<F = $(notdir $<)
# environment
PAGER = less
# makefile (from 'makefile', line 14)
DATABASE_CONTAINERS = $(DATABASE_CONTAINER) $(ADMIN_DATABASE_CONTAINER)
# environment
LC_ALL = C
# environment
HOSTTYPE = x86_64
# automatic
^F = $(notdir $^)
# default
SUFFIXES := 
# makefile (from 'makefile', line 5)
FRONT_CONTAINER = frontend-web-delta-v
# makefile (from 'makefile', line 149)
SPACE = 40             
# environment
WAYLAND_DISPLAY = wayland-0
# default
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# default
.RECIPEPREFIX := 
# environment
LANG = C
# environment
TERM = xterm-256color
# environment
VSCODE_EXTHOST_WILL_SEND_SOCKET = true
# environment
WSL_DISTRO_NAME = Ubuntu
# variable set hash-table stats:
# Load=92/1024=9%, Rehash=0, Collisions=6/122=5%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# . (device 2080, inode 4581843): 17 files, no impossibilities.

# 17 files, no impossibilities in 1 directories.

# Implicit Rules

%:
#  recipe to execute (from 'makefile', line 151):
	@:

# 1 implicit rules, 0 (0.0%) terminal.

# Files

stop:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 43):
	$(DOCKER_COMPOSE) stop

start-storybook:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 38):
	$(DOCKER_COMPOSE) up --remove-orphans $(STORYBOOK_CONTAINER)
	

db-drop-e2e:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 122):
	$(DOCKER_COMPOSE_RUN) --rm $(TEST_BACK_CONTAINER) yarn typeorm:drop
	

all:
#  Command line target.
#  Implicit rule search has been done.
#  Implicit/static pattern stem: 'all'
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# automatic
# @ := all
# automatic
# % := 
# automatic
# * := all
# automatic
# + := 
# automatic
# | := 
# automatic
# < := 
# automatic
# ^ := 
# automatic
# ? := 
# variable set hash-table stats:
# Load=8/32=25%, Rehash=0, Collisions=1/11=9%
#  recipe to execute (from 'makefile', line 151):
	@:

.PHONY: start-back start-front start-storybook stop run-back run-back-e2e run-front build-front start-build-front y-i-back y-i-front test-back test-back-watch test-front test-front-watch lint-back lint-front db-drop db-drop-e2e db-generate-migration db-migrate-run db-migrate-run-e2e db-fixtures-load db-fixtures-clear-load help
#  Implicit rule search has not been done.
#  Modification time never checked.
 
#  File has not been updated.

run-back-e2e:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 54):
	$(DOCKER_COMPOSE) run --rm $(TEST_BACK_CONTAINER) $(filter-out $@,$(MAKECMDGOALS))

start-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 34):
	$(DOCKER_COMPOSE) up --remove-orphans $(FRONT_CONTAINER)

test-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 99):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) yarn jest $(filter-out $@,$(MAKECMDGOALS)) --color

test-front-watch:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 103):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) yarn jest:watch $(filter-out $@,$(MAKECMDGOALS)) --color

build-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 66):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) yarn build-prod

db-generate-migration:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 127):
	$(DOCKER_COMPOSE_RUN) --rm $(BACK_CONTAINER) yarn migration:generate -n $(filter-out $@,$(MAKECMDGOALS))

makefile:
#  Implicit rule search has been done.
#  Implicit/static pattern stem: 'makefile'
#  Last modified 2022-05-23 09:05:24.3712381
#  File has been updated.
#  Successfully updated.
#  recipe to execute (from 'makefile', line 151):
	@:

start-back:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 29):
	$(DOCKER_COMPOSE) up -d --remove-orphans $(BACK_CONTAINERS)
	$(DOCKER_COMPOSE) logs -f $(BACK_CONTAINER)
	

test-back:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 89):
	$(DOCKER_COMPOSE) run --rm $(TEST_BACK_CONTAINER) yarn jest --coverage tests/$(filter-out $@,$(MAKECMDGOALS)) --color
	$(DOCKER_COMPOSE) stop $(TEST_DATABASE_CONTAINER)

help:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 153):
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-${SPACE}s\033[0m %s\n", $$1, $$2}' | sed -e 's/\[32m##/[33m/'

test-back-watch:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 94):
	$(DOCKER_COMPOSE) run --rm $(TEST_BACK_CONTAINER) yarn jest:watch tests/$(filter-out $@,$(MAKECMDGOALS)) --color
	$(DOCKER_COMPOSE) stop $(TEST_DATABASE_CONTAINER)

y-i-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 81):
	$(DOCKER_COMPOSE) run --rm --no-deps $(FRONT_CONTAINER) yarn install --ignore-scripts

db-fixtures-load:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 138):
	$(DOCKER_COMPOSE_RUN) --rm $(BACK_CONTAINER) yarn fixtures:load

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

run-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 58):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) $(filter-out $@,$(MAKECMDGOALS))

db-migrate-run:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 131):
	$(DOCKER_COMPOSE_RUN) --rm $(BACK_CONTAINER) yarn migration:run

start-build-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 70):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) yarn start

db-drop:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 119):
	$(DOCKER_COMPOSE_RUN) --rm $(BACK_CONTAINER) yarn typeorm:drop

y-i-back:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 77):
	$(DOCKER_COMPOSE) run --rm --no-deps $(BACK_CONTAINER) yarn install --ignore-scripts

lint-front:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 111):
	$(DOCKER_COMPOSE) run --rm $(FRONT_CONTAINER) yarn lint

run-back:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 51):
	$(DOCKER_COMPOSE) run --rm $(BACK_CONTAINER) $(filter-out $@,$(MAKECMDGOALS))

db-fixtures-clear-load:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 142):
	$(DOCKER_COMPOSE_RUN) --rm $(BACK_CONTAINER) bash -c "yarn typeorm:drop && yarn migration:run && yarn fixtures:load"

lint-back:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 107):
	$(DOCKER_COMPOSE) run --rm $(BACK_CONTAINER) yarn lint

db-migrate-run-e2e:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'makefile', line 134):
	$(DOCKER_COMPOSE_RUN) --rm $(TEST_BACK_CONTAINER) yarn migration:run

# files hash-table stats:
# Load=30/1024=3%, Rehash=0, Collisions=3/115=3%
# VPATH Search Paths

# No 'vpath' search paths.

# No general ('VPATH' variable) search path.

# strcache buffers: 1 (0) / strings = 49 / storage = 544 B / avg = 11 B
# current buf: size = 8162 B / used = 544 B / count = 49 / avg = 11 B

# strcache performance: lookups = 154 / hit rate = 68%
# hash-table stats:
# Load=49/8192=1%, Rehash=0, Collisions=4/154=3%
# Finished Make data base on Sat Jun  4 11:18:20 2022

 
